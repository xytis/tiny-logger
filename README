Simple generic logger.

Can be used by including Logger.hpp.
This alllows:

  Logger::set_output(Logger::PRIORITY, std::ostream * output);
  Logger::set_header(std::string (*header_generator) (Logger::PRIORITY));

  //Also supplies default header generators:
  Logger::empty(Logger::PRIORITY);
  Logger::date(Logger::PRIORITY);
  Logger::date_priority(Logger::PRIORITY); //Default

  log_log << "Some random info" << info << endl;
  log_err << "Some error";
  log_warn << "Some warning";
  log_debug << "debug text";

  log_logf("Format string %s", "string");
  log_errf("%d %d %d", year, month, day);
  log_warnf("THE WORLD WILL END IN %f SEC", sec);
  log_debugf("debug text");

TODO: 
Make threading safe.
  x Add mutex in singleton constructor. [Needs testing]
  o Add lock on streams, for correct resolving of concurent << operators.
  o Write (or copy) good variadic printf function to resolve logf calls. (Current has no formating abilites)